import re
import json
from urllib.parse import quote
from scrapy import Spider, Request
from scrapy.http import JsonRequest
from ..items import JobLoader, WageInfoLoader, ShiftInfoLoader
from ..procs import *


class LeggbeltingComSpider(Spider):
    name = 'leggbelting.com'
    allowed_domains = ['continental-jobs.com']
    xpath = {
        'title': '//div[@id="wrapper"]//h1/text()',
        'description': (
            '//div[a[strong[contains(text(), "Description")]]]'
            '/following-sibling::div/text()'
        ),
        'location': '//div[@id="map-container"]/following-sibling::a/text()',
    }
    re = {
        'city': r'\b([A-Za-z -]+),\s*[A-Z]{2}\b',
        'state': r'\b[A-Za-z -]+,\s*([A-Z]{2})\b',
    }
    api_query = "{\"LanguageCode\":\"EN\",\"SearchParameters\":{\"FirstItem\":%s,\
    \"CountItem\":100,\"Sort\":[{\"Criterion\":\"PublicationStartDate\",\"Direction\":\
    \"DESC\"}],\"MatchedObjectDescriptor\":[\"ID\",\"PositionID\",\"PositionTitle\",\
    \"PositionURI\",\"PositionLocation.CountryName\",\"PositionLocation.CityName\",\
    \"PositionLocation.Longitude\",\"PositionLocation.Latitude\",\"PositionIndustry.Name\",\
    \"JobCategory.Name\",\"PublicationStartDate\",\"VacancyDivision\"]},\"SearchCriteria\":\
    [{\"CriterionName\":\"PositionLocation.Country\",\"CriterionValue\":[\"50\"]},\
    {\"CriterionName\":\"PublicationLanguage.Code\",\"CriterionValue\":[\"EN\"]},\
    {\"CriterionName\":\"PublicationChannel.Code\",\"CriterionValue\":[\"12\"]}]}"

    def start_requests(self):
        query_string = quote(self.api_query % 0)
        yield Request(
            # how was this url derived? requires inspect of network requests generated by JavaScript execution?
            'https://api.continental-jobs.com/search/?data=' + query_string,
            meta={'initial': True},
        )

    # scraper appears to be incomplete/broken
    #   - scraped jobs are first page of results from open search on Contentinental-Jobs platform,
    #     having no direct affiliation with Legg Belting.
    def parse(self, response):
        data = response.json()
        if response.meta['initial']:
            total = data['SearchResult']['SearchResultCountAll']
            for n in range(100, total, 100):
                query_string = quote(self.api_query % n)
                yield Request(
                    'https://api.continental-jobs.com/search/?data=' + query_string
                )
        for result in data['SearchResult']['SearchResultItems']:
            job_id = result['MatchedObjectId']
            url = result['MatchedObjectDescriptor']['PositionURI']
            yield Request(url, callback=self.parse_job)

    def parse_job(self, response):
        job_loader = JobLoader(response=response)
        job_loader.add_value('company', 'Legg Co., Inc.')
        job_loader.add_value('jobSourceUrl', response.url)
        title = response.xpath(self.xpath['title']).get()
        job_loader.add_value('title', title)
        job_loader.add_value('jobLevel', title)
        job_loader.add_value('jobType', title)
        job_loader.add_xpath('city', self.xpath['location'], re=self.re['city'])
        job_loader.add_xpath('state', self.xpath['location'], re=self.re['state'])
        job_loader.add_xpath('description', self.xpath['description'])
        shift_info_loader = ShiftInfoLoader()
        shift_info_loader.add_value('shifts', title)
        shift_info = shift_info_loader.load_item()
        job_loader.add_value('shiftInfo', shift_info)
        job = job_loader.load_item()
        return job
